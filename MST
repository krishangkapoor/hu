import java.util.Random;

public class MST {
    public static void main(String[] args) {
        Graph g = GraphOfEssex.getGraph();
        double totalWeight = MST.totalEdgeWeight(g);
        System.out.println("Total edge weight of the graph of Essex: " + totalWeight);

        Graph randomGraph = MST.getRandomGraph(100, 0.4);
        double totalEdgeWeight = MST.totalEdgeWeight(randomGraph);
        System.out.println("Total edge weight of the random graph: " + totalEdgeWeight);

        int numGraphs = 100;
        int Vertices = 100;
        double edgeProbability = 0.4;
        double totalWeightSum = 0;

        for (int i = 0; i < numGraphs; i++) {
            Graph treesGraph = getRandomGraph(Vertices, edgeProbability);
            Graph minimumSpanningTree = spanningTree(treesGraph);
            totalWeightSum += totalEdgeWeight(minimumSpanningTree);
        }
        double averageWeight = totalWeightSum / numGraphs;
        System.out.println("Average Total Edge Weight of the minimum spanning trees: " + averageWeight);
    }

    public static double totalEdgeWeight(Graph g) {
        double totalWeight = 0.0;

        for (int i = 0; i < g.numVertices(); i++) {
            int[] neighbours = g.neighbours(i);
            for (int neighbour : neighbours) {
                if (i < neighbour) {
                    totalWeight += g.weight(i, neighbour);
                }
            }
        }
        return totalWeight;
    }

    public static Graph getRandomGraph(int n, double p) {
        Graph randomGraph = new MatrixGraph(n, Graph.UNDIRECTED_GRAPH);
        Random rand = new Random();

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (rand.nextDouble() <= p) {
                    double w = rand.nextDouble();
                    randomGraph.addEdge(i, j, w);
                }
            }
        }
        return randomGraph;
    }

    public static class ComponentTracker {
        private int[] representative;

        public ComponentTracker(int n) {
            representative = new int[n];
            for (int i = 0; i < n; i++) {
                representative[i] = i;
            }
        }

        public int representativeOf(int x) {
            return representative[x];
        }

        public boolean inSameComponent(int x, int y) {
            return representativeOf(x) == representativeOf(y);
        }

        public void mergeComponents(int x, int y) {
            int representativeX = representativeOf(x);
            int representativeY = representativeOf(y);
            representative[representativeX] = representativeY;
        }
    }

    public static Graph spanningTree(Graph g) {
        int Vertices = g.numVertices();
        Graph T = new MatrixGraph(Vertices, Graph.UNDIRECTED_GRAPH);
        ComponentTracker tracker = new ComponentTracker(Vertices);

        int edgesAdded = 0;
        while (edgesAdded < Vertices - 1) {
            int minimumEdgeX = -1, minimumEdgeY = -1;
            double minimumWeight = Double.POSITIVE_INFINITY;

            for (int i = 0; i < Vertices; i++) {
                int[] vertices = g.neighbours(i);
                for (int vertex : vertices) {
                    double weight = g.weight(i, vertex);
                    if (weight < minimumWeight && !tracker.inSameComponent(i, vertex)) {
                        minimumWeight = weight;
                        minimumEdgeX = i;
                        minimumEdgeY = vertex;
                    }
                }
            }

            if (minimumEdgeX == -1 || minimumEdgeY == -1) {
                break;
            }

            T.addEdge(minimumEdgeX, minimumEdgeY, minimumWeight);
            tracker.mergeComponents(minimumEdgeX, minimumEdgeY);
            edgesAdded++;
        }
        return T;
    }
}
